{"version":3,"file":"dot-wasm.js","sources":["../src/__bin__/dot-wasm.ts"],"sourcesContent":["import fs from \"fs\";\r\nimport * as yargs from \"yargs\";\r\nimport { hideBin } from \"yargs/helpers\";\r\nimport { Graphviz, Engine, Format, Options } from \"@hpcc-js/wasm/graphviz\";\r\n\r\nconst myYargs = yargs.default(hideBin(process.argv)) as yargs.Argv<{ vx: boolean, layout: Engine, format: Format, n: string }>;\r\nmyYargs\r\n    .usage(\"Usage: dot-wasm [options] fileOrDot\")\r\n    .demandCommand(0, 1)\r\n    .example(\"dot-wasm -K neato -T xdot ./input.dot\", \"Execute NEATO layout and outputs XDOT format.\")\r\n    .alias(\"K\", \"layout\")\r\n    .nargs(\"K\", 1)\r\n    .describe(\"K\", \"Set layout engine (circo | dot | fdp | sfdp | neato | osage | patchwork | twopi). By default, dot is used.\")\r\n    .alias(\"T\", \"format\")\r\n    .nargs(\"T\", 1)\r\n    .describe(\"T\", \"Set output language to one of the supported formats (svg | dot | json | dot_json | xdot_json | plain | plain-ext). By default, svg is produced.\")\r\n    .alias(\"n\", \"neato-no-op\")\r\n    .nargs(\"n\", 1)\r\n    .describe(\"n\", \"Sets no-op flag in neato.  \\\"-n 1\\\" assumes neato nodes have already been positioned and all nodes have a pos attribute giving the positions. It then performs an optional adjustment to remove node-node overlap, depending on the value of the overlap attribute, computes the edge layouts, depending on the value of the splines attribute, and emits the graph in the appropriate format.\\n\\\"-n 2\\\" Use node positions as specified, with no adjustment to remove node-node overlaps, and use any edge layouts already specified by the pos attribute. neato computes an edge layout for any edge that does not have a pos attribute. As usual, edge layout is guided by the splines attribute.\")\r\n    .alias(\"y\", \"invert-y\")\r\n    .nargs(\"y\", 0)\r\n    .describe(\"y\", \"By default, the coordinate system used in generic output formats, such as attributed dot, extended dot, plain and plain-ext, is the standard cartesian system with the origin in the lower left corner, and with increasing y coordinates as points move from bottom to top. If the -y flag is used, the coordinate system is inverted, so that increasing values of y correspond to movement from top to bottom.\")\r\n    .nargs(\"v\", 0)\r\n    .describe(\"v\", \"Echo GraphViz library version\")\r\n    .help(\"h\")\r\n    .alias(\"h\", \"help\")\r\n    .epilog(\"https://github.com/hpcc-systems/hpcc-js-wasm\")\r\n    ;\r\n\r\nconst argv = await myYargs.argv;\r\n\r\ntry {\r\n    let dot;\r\n    if (fs.existsSync(argv._[0] as string)) {\r\n        dot = fs.readFileSync(argv._[0], \"utf8\");\r\n    } else {\r\n        dot = argv._[0] as string;\r\n    }\r\n    const graphviz = await Graphviz.load();\r\n\r\n    if (argv.v) {\r\n        console.log(`GraphViz version:  ${graphviz.version()}`);\r\n    } else if (dot) {\r\n\r\n        if (argv.n && argv.layout.trim() !== \"neato\") {\r\n            throw new Error(\"-n option is only supported with -T neato\");\r\n        }\r\n\r\n        const ext: Options = {\r\n        };\r\n        if (argv.n) {\r\n            ext.nop = parseInt(argv.n);\r\n        }\r\n        if (argv.y) {\r\n            ext.yInvert = true;\r\n        }\r\n\r\n        const response = graphviz.layout(dot, (argv.format?.trim() ?? \"svg\") as Format, (argv.layout?.trim() ?? \"dot\") as Engine, ext);\r\n        console.log(response);\r\n    } else {\r\n        throw new Error(\"'fileOrDot' is required.\");\r\n    }\r\n} catch (e: any) {\r\n    console.error(`Error:  ${e?.message}\\n`);\r\n    myYargs.showHelp();\r\n}\r\n"],"names":[],"mappings":"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"}