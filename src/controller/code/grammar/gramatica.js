/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,19],$V3=[1,21],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,23],$Va=[1,25],$Vb=[1,26],$Vc=[1,24],$Vd=[1,22],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[2,5,21,22,43,45,46,47,48,49,50,52,53,54,75,78,80,81,82],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,53],$Vm=[1,76],$Vn=[1,69],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,88],$VC=[1,89],$VD=[12,25,57,58,59,60,61,62,65,66,67,68,69,70,71,72,76],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[2,5,21,22,23,37,38,39,40,41,43,45,46,47,48,49,50,52,53,54,58,73,75,78,80,81,82,83,84,85,86,87,88],$VT=[25,76],$VU=[12,25,71,72,76],$VV=[1,166],$VW=[12,25,57,58,61,65,66,67,68,69,70,71,72,76],$VX=[12,25,61,65,66,71,72,76],$VY=[12,25,61,65,66,67,68,69,70,71,72,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"main":7,"Print":8,"Declaration":9,"Asignacion":10,"Callfuncion":11,"PUNTOCOMA":12,"DeclararFuncion":13,"Operaciones_unarias":14,"For":15,"cif":16,"While":17,"Dowhile":18,"ReturnExp":19,"Transfer":20,"MAIN":21,"PRINT":22,"PARIZQ":23,"Expression":24,"PARDER":25,"Primitivo":26,"Accvar":27,"Aritmetica":28,"Relacionales":29,"Logicos":30,"Tolower":31,"Toupper":32,"Truncate":33,"Round":34,"Typeof":35,"Tostring":36,"INT":37,"DOUBLE":38,"BOOL":39,"CHAR":40,"CADENA":41,"Tipo":42,"IDENTIFICADOR":43,"IGUAL":44,"RES_INT":45,"RES_DOUBLE":46,"RES_BOOL":47,"RES_CHAR":48,"RES_STRING":49,"FOR":50,"Statement":51,"WHILE":52,"DO":53,"IF":54,"celse":55,"ELSE":56,"MAS":57,"MENOS":58,"POR":59,"DIVISION":60,"POTENCIA":61,"MODULO":62,"INCREMENTO":63,"DECREMENTO":64,"IGUALAR":65,"NOIGUAL":66,"MENOR":67,"MENORIGUAL":68,"MAYOR":69,"MAYORIGUAL":70,"OR":71,"AND":72,"NOT":73,"Parametros":74,"VOID":75,"COMA":76,"LLAVEIZQ":77,"LLAVEDER":78,"Argumentos":79,"RETURN":80,"BREAK":81,"CONTINUE":82,"TOLOWER":83,"TOUPPER":84,"TRUNCATE":85,"ROUND":86,"TYPEOF":87,"TOSTRING":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"PUNTOCOMA",21:"MAIN",22:"PRINT",23:"PARIZQ",25:"PARDER",37:"INT",38:"DOUBLE",39:"BOOL",40:"CHAR",41:"CADENA",43:"IDENTIFICADOR",44:"IGUAL",45:"RES_INT",46:"RES_DOUBLE",47:"RES_BOOL",48:"RES_CHAR",49:"RES_STRING",50:"FOR",52:"WHILE",53:"DO",54:"IF",56:"ELSE",57:"MAS",58:"MENOS",59:"POR",60:"DIVISION",61:"POTENCIA",62:"MODULO",63:"INCREMENTO",64:"DECREMENTO",65:"IGUALAR",66:"NOIGUAL",67:"MENOR",68:"MENORIGUAL",69:"MAYOR",70:"MAYORIGUAL",71:"OR",72:"AND",73:"NOT",75:"VOID",76:"COMA",77:"LLAVEIZQ",78:"LLAVEDER",80:"RETURN",81:"BREAK",82:"CONTINUE",83:"TOLOWER",84:"TOUPPER",85:"TRUNCATE",86:"ROUND",87:"TYPEOF",88:"TOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,3],[8,5],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[9,3],[9,5],[42,1],[42,1],[42,1],[42,1],[42,1],[27,1],[15,8],[17,5],[18,7],[16,6],[55,2],[55,2],[55,0],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[14,2],[14,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[30,3],[30,3],[30,2],[10,4],[13,6],[13,6],[13,5],[13,5],[74,4],[74,2],[51,3],[11,3],[11,4],[79,3],[79,1],[19,3],[19,2],[20,2],[20,2],[31,4],[32,4],[33,4],[34,4],[35,4],[36,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 3: case 83:
 this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 9: case 11: case 12: case 13: case 14: case 15: case 16: case 25: case 26: case 29: case 30: case 31: case 32: case 50: case 51:
 this.$ = $$[$0]; 
break;
case 8: case 10: case 18:
 this.$ = $$[$0-1]; 
break;
case 17:
 
        console.error('Este es un error sintactico: ' +yytext + ', en la linea: '+ this._$.first_line+ ', en la columna: '+ this._$.first_column);  
        const nuevoobj =  { tipo: "Sintactico", descripcion: `token no esperado:  ${yytext}`, linea:  this._$.first_line , columna: this._$.first_column+1};
        Err.push(nuevoobj)
    
break;
case 19:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2]);
break;
case 20: case 21: case 22: case 23: case 24: case 27: case 28:
 this.$ = $$[$0];
break;
case 33:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.INT);
break;
case 34:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.DOUBLE);
break;
case 35:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 36:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.CHAR);
break;
case 37:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.STRING);
break;
case 38:
 this.$ = new Declaration($$[$0-1], $$[$0-2], null, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 39:
 this.$ = new Declaration($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 40:
 this.$ = Type.INT 
break;
case 41:
 this.$ = Type.DOUBLE
break;
case 42:
 this.$ = Type.BOOLEAN
break;
case 43:
 this.$ = Type.CHAR
break;
case 44:
 this.$ = Type.STRING
break;
case 45:
 this.$ = new Access($$[$0], _$[$0].first_line,_$[$0].first_column);
break;
case 46:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0] ,_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 47:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 48:
 this.$ = new Dowhile($$[$0-2], $$[$0-5] , _$[$0-6].first_line,_$[$0-6].first_column);
break;
case 49:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 52:
 this.$ = null; 
break;
case 53:
 this.$ = new Operacion_aritmetica($$[$0-2],"+",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 54:
 this.$ = new Operacion_aritmetica($$[$0-2],"-",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 55:
 this.$ = new Operacion_aritmetica($$[$0-2],"*",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 56:
 this.$ = new Operacion_aritmetica($$[$0-2],"/",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 57:
 this.$ = new Operacion_aritmetica($$[$0-2],"^",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 58:
 this.$ = new Operacion_aritmetica($$[$0-2],"%",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 59:
 this.$ = new Operacion_aritmetica($$[$0],'umenos', $$[$0] ,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 60:
 this.$ = $$[$0-1]
break;
case 61:
 this.$ = new Operacion_unaria($$[$0-1],"++", _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 62:
 this.$ = new Operacion_unaria($$[$0-1],"--", _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 63:
 this.$ = new Operacion_relacional($$[$0-2],"==",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 64:
 this.$ = new Operacion_relacional($$[$0-2],"!=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 65:
 this.$ = new Operacion_relacional($$[$0-2],"<",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 66:
 this.$ = new Operacion_relacional($$[$0-2],"<=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 67:
 this.$ = new Operacion_relacional($$[$0-2],">",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 68:
 this.$ = new Operacion_relacional($$[$0-2],">=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 69:
 this.$ = new Operacion_logica($$[$0-2], "OR", $$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 70:
 this.$ = new Operacion_logica($$[$0-2], "AND", $$[$0] , _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
 this.$ = new Operacion_logica($$[$0], "NOT", $$[$0] , _$[$0-1].first_line,_$[$0-1].first_column)
break;
case 72:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 73:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0], _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 74:
 this.$ = new Funcion(Type.NULL, $$[$0-4], $$[$0-2], $$[$0] , _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 75:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 76:
 this.$ = new Funcion(Type.NULL, $$[$0-3], [], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 77:

                                            $$[$0-3].push( new Parametro($$[$0-1], $$[$0], _$[$0-3].first_line,_$[$0-3].first_column));
                                            this.$ = $$[$0-3];
                                        
break;
case 78:
 
                                let para = new Parametro($$[$0-1], $$[$0], _$[$0-1].first_line,_$[$0-1].first_column)
                                let params = [];
                                params.push(para);
                                this.$ = params;
                            
break;
case 79:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 80:
 this.$ = new CallFuncion($$[$0-2], [] , _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 81:
 this.$ = new CallFuncion($$[$0-3], $$[$0-1] , _$[$0-3].first_line,_$[$0-3].first_column);
break;
case 82:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 84:
 this.$ = new ReturnExpression( $$[$0-1], Type.RETURN , _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 85:
 this.$ = new ReturnExpression( null, Type.RETURN , _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 86:
 this.$ = new ReturnExpression( 0, Type.BREAK, _$[$0-1].first_line,_$[$0-1].first_column);
break;
case 87:
 this.$ = new ReturnExpression( 0, Type.CONTINUE,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 88:
 this.$ = new TOLower($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 89:
 this.$ = new TOUpper($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 90:
 this.$ = new Truncate($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 91:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 92:
 this.$ = new TypeOf($$[$0-1],  _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 93:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:$V2,42:20,43:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,52:$Va,53:$Vb,54:$Vc,75:$Vd,80:$Ve,81:$Vf,82:$Vg},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:$V2,42:20,43:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,52:$Va,53:$Vb,54:$Vc,75:$Vd,80:$Ve,81:$Vf,82:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),{12:[1,37]},o($Vh,[2,9]),{12:[1,38]},o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),{12:[1,39]},{11:40,43:[1,41]},{23:[1,42]},{43:[1,43]},{23:$Vi,44:[1,44],63:$Vj,64:$Vk},{43:[1,48]},{23:[1,49]},{23:[1,50]},{23:[1,51]},{51:52,77:$Vl},{11:62,12:[1,55],14:60,23:$Vm,24:54,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{12:[1,84]},{12:[1,85]},{43:[2,40]},{43:[2,41]},{43:[2,42]},{43:[2,43]},{43:[2,44]},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,8]),o($Vh,[2,10]),o($Vh,[2,17]),{12:[1,86]},{23:$Vi},{11:62,14:60,23:$Vm,24:87,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{12:$VB,23:[1,90],44:$VC},{11:62,14:60,23:$Vm,24:91,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:94,25:[1,92],26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,79:93,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VD,[2,61]),o($VD,[2,62]),{23:[1,95]},{9:96,42:97,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8},{11:62,14:60,23:$Vm,24:98,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:99,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{52:[1,100]},{2:$V0,4:101,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:$V2,42:20,43:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,52:$Va,53:$Vb,54:$Vc,75:$Vd,80:$Ve,81:$Vf,82:$Vg},{12:[1,102],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($Vh,[2,85]),o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),o($VD,[2,36]),o($VD,[2,37]),o($VD,[2,45],{23:$Vi,63:$Vj,64:$Vk}),{11:62,14:60,23:$Vm,24:117,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:118,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:119,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{23:[1,120]},{23:[1,121]},{23:[1,122]},{23:[1,123]},{23:[1,124]},{23:[1,125]},o($Vh,[2,86]),o($Vh,[2,87]),o($Vh,[2,18]),{25:[1,126],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VS,[2,38]),{11:62,14:60,23:$Vm,24:127,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{25:[1,129],42:130,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,74:128},{12:[1,131],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VD,[2,80]),{25:[1,132],76:[1,133]},o($VT,[2,83],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{25:[1,135],42:130,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,74:134},{11:62,14:60,23:$Vm,24:136,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{43:[1,137]},{25:[1,138],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,139],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{23:[1,140]},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:$V2,42:20,43:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8,50:$V9,52:$Va,53:$Vb,54:$Vc,75:$Vd,78:[1,141],80:$Ve,81:$Vf,82:$Vg},o($Vh,[2,84]),{11:62,14:60,23:$Vm,24:142,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:143,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:144,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:145,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:146,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:147,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:148,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:149,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:150,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:151,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:152,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:153,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:154,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:155,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VD,[2,59]),{25:[1,156],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VU,[2,71],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),{11:62,14:60,23:$Vm,24:157,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:158,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:159,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:160,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:161,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{11:62,14:60,23:$Vm,24:162,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{12:[1,163]},{12:[1,164],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,165],76:$VV},{51:167,77:$Vl},{43:[1,168]},o($Vh,[2,72]),o($VD,[2,81]),{11:62,14:60,23:$Vm,24:169,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{25:[1,170],76:$VV},{51:171,77:$Vl},{12:[1,172],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{12:$VB,44:$VC},{51:173,77:$Vl},{51:174,77:$Vl},{11:62,14:60,23:$Vm,24:175,26:56,27:57,28:58,29:59,30:61,31:63,32:64,33:65,34:66,35:67,36:68,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,43:$Vs,58:$Vt,73:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o([2,5,21,22,43,45,46,47,48,49,50,52,53,54,56,75,78,80,81,82],[2,79]),o($VW,[2,53],{59:$VG,60:$VH,62:$VJ}),o($VW,[2,54],{59:$VG,60:$VH,62:$VJ}),o($VD,[2,55]),o($VD,[2,56]),o([12,25,61,71,72,76],[2,57],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($VD,[2,58]),o($VX,[2,63],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ,67:$VM,68:$VN,69:$VO,70:$VP}),o($VX,[2,64],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ,67:$VM,68:$VN,69:$VO,70:$VP}),o($VY,[2,65],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ}),o($VY,[2,66],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ}),o($VY,[2,67],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ}),o($VY,[2,68],{57:$VE,58:$VF,59:$VG,60:$VH,62:$VJ}),o([12,25,71,76],[2,69],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,72:$VR}),o($VU,[2,70],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($VD,[2,60]),{25:[1,176],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,177],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,178],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,179],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,180],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{25:[1,181],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($Vh,[2,19]),o($VS,[2,39]),{51:182,77:$Vl},{42:183,45:$V4,46:$V5,47:$V6,48:$V7,49:$V8},o($Vh,[2,75]),o($VT,[2,78]),o($VT,[2,82],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{51:184,77:$Vl},o($Vh,[2,76]),{14:185,43:[1,186]},o($Vh,[2,52],{55:187,56:[1,188]}),o($Vh,[2,47]),{25:[1,189],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VD,[2,88]),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91]),o($VD,[2,92]),o($VD,[2,93]),o($Vh,[2,73]),{43:[1,190]},o($Vh,[2,74]),{25:[1,191]},{63:$Vj,64:$Vk},o($Vh,[2,49]),{16:193,51:192,54:$Vc,77:$Vl},{12:[1,194]},o($VT,[2,77]),{51:195,77:$Vl},o($Vh,[2,50]),o($Vh,[2,51]),o($Vh,[2,48]),o($Vh,[2,46])],
defaultActions: {30:[2,40],31:[2,41],32:[2,42],33:[2,43],34:[2,44],35:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const{Print} = require('../instruccion/Print');
    const{Primitivo} = require('../expression/Primitivo');
    const{Type} = require('../abstract/Tipo_primitivo');
    const{Declaration} = require('../instruccion/Declaration');
    const{Access} = require('../expression/Access');
    const{Operacion_aritmetica} = require('../expression/operacion_aritmetica');
    const{Asignacion} = require('../instruccion/asignacion.ts');
    const{Statement} = require('../instruccion/statement.ts');
    const{Funcion} = require('../instruccion/funcion.ts');
    const{Parametro} = require('../expression/parametro.ts');
    const{CallFuncion} = require('../expression/callFuncion.ts');
    const{Operacion_relacional} = require('../expression/operacion_relacional.ts');
    const{Operacion_unaria} = require('../expression/operacion_unaria.ts');
    const{For} = require('../instruccion/for.ts');
    const{If} = require('../instruccion/if.ts');
    const{Operacion_logica} = require('../expression/operacion_logica.ts');
    const{While} = require('../instruccion/while.ts');
    const{ReturnExpression} = require('../expression/return.ts');
    const{Dowhile} = require('../instruccion/dowhile.ts');
    const{TOLower} = require('../expression/tolower.ts');
    const{TOUpper} = require('../expression/toupper.ts');
    const{Truncate} = require('../expression/truncate.ts');
    const{Round} = require('../expression/round.ts');
    const{TypeOf} = require('../expression/typeof.ts');
    const{ToString} = require('../expression/tostring.ts')
    const{Err} = require('../salidas/out.ts')
    

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:return "MAIN";
break;
case 5:return "VOID";
break;
case 6:return "PRINT";
break;
case 7:return "TOLOWER";
break;
case 8:return "TOUPPER";
break;
case 9:return "LENGHT";
break;
case 10:return "TRUNCATE";
break;
case 11:return "ROUND";
break;
case 12:return 87;
break;
case 13:return "TOSTRING";
break;
case 14:return "TOCHARARRAY";
break;
case 15:return "IF";
break;
case 16:return "ELSE";
break;
case 17:return "SWITCH";
break;
case 18:return "CASE";
break;
case 19:return "DEFAULT";
break;
case 20:return "WHILE";
break;
case 21:return "FOR";
break;
case 22:return "DO";
break;
case 23:return "BREAK"
break;
case 24:return "CONTINUE";
break;
case 25:return "RETURN";
break;
case 26:return "NEW";
break;
case 27:return "ADD";     
break;
case 28:return "KLENNE";
break;
case 29:return "DOSPUNTOS";
break;
case 30:return "PUNTOCOMA";
break;
case 31:return "PARIZQ";
break;
case 32:return "PARDER";
break;
case 33:return "LLAVEIZQ";
break;
case 34:return "LLAVEDER";
break;
case 35:return "CORIZQ";
break;
case 36:return "CORDER";
break;
case 37:return "COMA"
break;
case 38:return "PUNTO";
break;
case 39:return "RES_INT";
break;
case 40:return "RES_DOUBLE";
break;
case 41:return "RES_BOOL";
break;
case 42:return "RES_CHAR";
break;
case 43:return "RES_STRING";
break;
case 44:return "INCREMENTO";
break;
case 45:return "DECREMENTO";
break;
case 46:return "MAS";
break;
case 47:return "MENOS";
break;
case 48:return "POR";
break;
case 49:return "DIVISION";
break;
case 50:return "POTENCIA";
break;
case 51:return "MODULO";
break;
case 52:return "IGUALAR";
break;
case 53:return "IGUAL";
break;
case 54:return "NOIGUAL";
break;
case 55:return "MENORIGUAL"
break;
case 56:return "MENOR";
break;
case 57:return "MAYORIGUAL";
break;
case 58:return "MAYOR";
break;
case 59:return "OR";
break;
case 60:return "AND";
break;
case 61:return "NOT";
break;
case 62:return 38;
break;
case 63:return 37;
break;
case 64:return 39;
break;
case 65:return 40;
break;
case 66:return 41;
break;
case 67:return 43;
break;
case 68:return 5;
break;
case 69: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  
                            const nuevooble =  { tipo: "Lexico", descripcion: `Caracter: ${yy_.yytext} no esperado`, linea:  yy_.yylloc.first_line , columna: yy_.yylloc.first_column}
                            Err.push(nuevooble);
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Lenght\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:(\|\|))/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:true|false\b)/i,/^(?:('[^']'))/i,/^(?:("([^\"]|\\")*"))/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}