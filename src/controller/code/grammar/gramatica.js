/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,21],$V3=[1,23],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,35],$V8=[1,36],$V9=[1,25],$Va=[1,27],$Vb=[1,28],$Vc=[1,26],$Vd=[1,24],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[2,5,23,24,48,50,51,52,53,54,57,59,60,61,84,87,89,90,91],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,57],$Vm=[1,83],$Vn=[1,76],$Vo=[1,77],$Vp=[1,78],$Vq=[1,79],$Vr=[1,80],$Vs=[1,81],$Vt=[1,82],$Vu=[1,84],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[48,55],$VD=[1,96],$VE=[1,97],$VF=[13,27,56,64,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,85,87],$VG=[1,127],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[2,5,23,24,25,42,43,44,45,46,48,50,51,52,53,54,57,59,60,61,67,82,84,87,89,90,91,92,93,94,95,96,97,98],$VW=[1,148],$VX=[27,85,87],$VY=[13,27,56,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,85,87],$VZ=[13,27,56,65,80,81,85,87],$V_=[1,184],$V$=[13,27,56,65,66,67,70,74,75,76,77,78,79,80,81,85,87],$V01=[13,27,56,65,70,74,75,80,81,85,87],$V11=[13,27,56,65,70,74,75,76,77,78,79,80,81,85,87],$V21=[27,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"main":7,"Print":8,"Declaration":9,"Asignacion":10,"AsignacionVector":11,"Callfuncion":12,"PUNTOCOMA":13,"DeclararFuncion":14,"Operaciones_unarias":15,"Declararvector":16,"For":17,"cif":18,"While":19,"Dowhile":20,"ReturnExp":21,"Transfer":22,"MAIN":23,"PRINT":24,"PARIZQ":25,"Expression":26,"PARDER":27,"Primitivo":28,"Accvar":29,"Accvector":30,"Aritmetica":31,"Relacionales":32,"Logicos":33,"Ternario":34,"Tolower":35,"Toupper":36,"Truncate":37,"Round":38,"Typeof":39,"Tostring":40,"Lenght":41,"INT":42,"DOUBLE":43,"BOOL":44,"CHAR":45,"CADENA":46,"Tipo":47,"IDENTIFICADOR":48,"IGUAL":49,"RES_INT":50,"RES_DOUBLE":51,"RES_BOOL":52,"RES_CHAR":53,"RES_STRING":54,"CORIZQ":55,"CORDER":56,"FOR":57,"Statement":58,"WHILE":59,"DO":60,"IF":61,"celse":62,"ELSE":63,"KLENNE":64,"DOSPUNTOS":65,"MAS":66,"MENOS":67,"POR":68,"DIVISION":69,"POTENCIA":70,"MODULO":71,"INCREMENTO":72,"DECREMENTO":73,"IGUALAR":74,"NOIGUAL":75,"MENOR":76,"MENORIGUAL":77,"MAYOR":78,"MAYORIGUAL":79,"OR":80,"AND":81,"NOT":82,"Parametros":83,"VOID":84,"COMA":85,"LLAVEIZQ":86,"LLAVEDER":87,"Argumentos":88,"RETURN":89,"BREAK":90,"CONTINUE":91,"TOLOWER":92,"TOUPPER":93,"TRUNCATE":94,"ROUND":95,"TYPEOF":96,"TOSTRING":97,"LENGTH":98,"NEW":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"PUNTOCOMA",23:"MAIN",24:"PRINT",25:"PARIZQ",27:"PARDER",42:"INT",43:"DOUBLE",44:"BOOL",45:"CHAR",46:"CADENA",48:"IDENTIFICADOR",49:"IGUAL",50:"RES_INT",51:"RES_DOUBLE",52:"RES_BOOL",53:"RES_CHAR",54:"RES_STRING",55:"CORIZQ",56:"CORDER",57:"FOR",59:"WHILE",60:"DO",61:"IF",63:"ELSE",64:"KLENNE",65:"DOSPUNTOS",66:"MAS",67:"MENOS",68:"POR",69:"DIVISION",70:"POTENCIA",71:"MODULO",72:"INCREMENTO",73:"DECREMENTO",74:"IGUALAR",75:"NOIGUAL",76:"MENOR",77:"MENORIGUAL",78:"MAYOR",79:"MAYORIGUAL",80:"OR",81:"AND",82:"NOT",84:"VOID",85:"COMA",86:"LLAVEIZQ",87:"LLAVEDER",89:"RETURN",90:"BREAK",91:"CONTINUE",92:"TOLOWER",93:"TOUPPER",94:"TRUNCATE",95:"ROUND",96:"TYPEOF",97:"TOSTRING",98:"LENGTH",99:"NEW"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,3],[8,5],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[9,3],[9,5],[47,1],[47,1],[47,1],[47,1],[47,1],[29,1],[30,4],[17,8],[19,5],[20,7],[18,6],[62,2],[62,2],[62,0],[34,5],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[15,2],[15,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[33,3],[33,3],[33,2],[10,4],[11,7],[14,6],[14,6],[14,5],[14,5],[83,4],[83,2],[58,3],[12,3],[12,4],[88,3],[88,1],[21,3],[21,2],[22,2],[22,2],[35,4],[36,4],[37,4],[38,4],[39,4],[40,4],[41,4],[16,11],[16,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 3: case 91:
 this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 10: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 28: case 29: case 30: case 33: case 34: case 35: case 36: case 37: case 56: case 57:
 this.$ = $$[$0]; 
break;
case 9: case 11: case 20:
 this.$ = $$[$0-1]; 
break;
case 19:
 
        console.error('Este es un error sintactico: ' +yytext + ', en la linea: '+ this._$.first_line+ ', en la columna: '+ this._$.first_column);  
        const nuevoobj =  { tipo: "Sintactico", descripcion: `token no esperado:  ${yytext}`, linea:  this._$.first_line , columna: this._$.first_column+1};
        Err.push(nuevoobj)
    
break;
case 21:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2]);
break;
case 22: case 23: case 24: case 25: case 26: case 27: case 31: case 32:
 this.$ = $$[$0];
break;
case 38:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.INT);
break;
case 39:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.DOUBLE);
break;
case 40:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 41:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.CHAR);
break;
case 42:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.STRING);
break;
case 43:
 this.$ = new Declaration($$[$0-1], $$[$0-2], null, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 44:
 this.$ = new Declaration($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 45:
 this.$ = Type.INT 
break;
case 46:
 this.$ = Type.DOUBLE
break;
case 47:
 this.$ = Type.BOOLEAN
break;
case 48:
 this.$ = Type.CHAR
break;
case 49:
 this.$ = Type.STRING
break;
case 50:
 this.$ = new Access($$[$0], _$[$0].first_line,_$[$0].first_column);
break;
case 51:
 this.$ = new AccessVector($$[$0-3], $$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column);
break;
case 52:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0] ,_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 53:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 54:
 this.$ = new Dowhile($$[$0-2], $$[$0-5] , _$[$0-6].first_line,_$[$0-6].first_column);
break;
case 55:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 58:
 this.$ = null; 
break;
case 59:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0],  _$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 60:
 this.$ = new Operacion_aritmetica($$[$0-2],"+",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 61:
 this.$ = new Operacion_aritmetica($$[$0-2],"-",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 62:
 this.$ = new Operacion_aritmetica($$[$0-2],"*",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 63:
 this.$ = new Operacion_aritmetica($$[$0-2],"/",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 64:
 this.$ = new Operacion_aritmetica($$[$0-2],"^",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 65:
 this.$ = new Operacion_aritmetica($$[$0-2],"%",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 66:
 this.$ = new Operacion_aritmetica($$[$0],'umenos', $$[$0] ,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 67:
 this.$ = $$[$0-1]
break;
case 68:
 this.$ = new Operacion_unaria($$[$0-1],"++", _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 69:
 this.$ = new Operacion_unaria($$[$0-1],"--", _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 70:
 this.$ = new Operacion_relacional($$[$0-2],"==",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 71:
 this.$ = new Operacion_relacional($$[$0-2],"!=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 72:
 this.$ = new Operacion_relacional($$[$0-2],"<",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 73:
 this.$ = new Operacion_relacional($$[$0-2],"<=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 74:
 this.$ = new Operacion_relacional($$[$0-2],">",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 75:
 this.$ = new Operacion_relacional($$[$0-2],">=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 76:
 this.$ = new Operacion_logica($$[$0-2], "OR", $$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:
 this.$ = new Operacion_logica($$[$0-2], "AND", $$[$0] , _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 78:
 this.$ = new Operacion_logica($$[$0], "NOT", $$[$0] , _$[$0-1].first_line,_$[$0-1].first_column)
break;
case 79:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 80:
 this.$ = new AsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line,_$[$0-6].first_column);
break;
case 81:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0], _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 82:
 this.$ = new Funcion(Type.NULL, $$[$0-4], $$[$0-2], $$[$0] , _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 83:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 84:
 this.$ = new Funcion(Type.NULL, $$[$0-3], [], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 85:

                                            $$[$0-3].push( new Parametro($$[$0-1], $$[$0], _$[$0-3].first_line,_$[$0-3].first_column));
                                            this.$ = $$[$0-3];
                                        
break;
case 86:
 
                                let para = new Parametro($$[$0-1], $$[$0], _$[$0-1].first_line,_$[$0-1].first_column)
                                let params = [];
                                params.push(para);
                                this.$ = params;
                            
break;
case 87:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 88:
 this.$ = new CallFuncion($$[$0-2], [] , _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 89:
 this.$ = new CallFuncion($$[$0-3], $$[$0-1] , _$[$0-3].first_line,_$[$0-3].first_column);
break;
case 90:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 92:
 this.$ = new ReturnExpression( $$[$0-1], Type.RETURN , _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 93:
 this.$ = new ReturnExpression( null, Type.RETURN , _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 94:
 this.$ = new ReturnExpression( null, Type.BREAK, _$[$0-1].first_line,_$[$0-1].first_column);
break;
case 95:
 this.$ = new ReturnExpression( null, Type.CONTINUE,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 96:
 this.$ = new TOLower($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 97:
 this.$ = new TOUpper($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 98:
 this.$ = new Truncate($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 99:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 100:
 this.$ = new TypeOf($$[$0-1],  _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 101:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 102:
 this.$ = new Lenght($$[$0-1],  _$[$0-3].first_line,_$[$0-3].first_column)
break;
case 103:
 this.$ = new Vector($$[$0-7], $$[$0-10], [], _$[$0-10].first_line,_$[$0-10].first_column);
break;
case 104:
 this.$ = new Vector($$[$0-5], $$[$0-8], $$[$0-2], _$[$0-8].first_line,_$[$0-8].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,47:22,48:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,57:$V9,59:$Va,60:$Vb,61:$Vc,84:$Vd,89:$Ve,90:$Vf,91:$Vg},{1:[3]},{2:$V0,5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,47:22,48:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,57:$V9,59:$Va,60:$Vb,61:$Vc,84:$Vd,89:$Ve,90:$Vf,91:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),{13:[1,39]},o($Vh,[2,10]),{13:[1,40]},o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{13:[1,41]},{12:42,48:[1,43]},{25:[1,44]},{48:[1,45],55:[1,46]},{25:$Vi,49:[1,47],55:[1,48],72:$Vj,73:$Vk},{48:[1,52]},{25:[1,53]},{25:[1,54]},{25:[1,55]},{58:56,86:$Vl},{12:67,13:[1,59],15:65,25:$Vm,26:58,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{13:[1,92]},{13:[1,93]},o($VC,[2,45]),o($VC,[2,46]),o($VC,[2,47]),o($VC,[2,48]),o($VC,[2,49]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,9]),o($Vh,[2,11]),o($Vh,[2,19]),{13:[1,94]},{25:$Vi},{12:67,15:65,25:$Vm,26:95,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{13:$VD,25:[1,98],49:$VE},{56:[1,99]},{12:67,15:65,25:$Vm,26:100,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:101,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:104,27:[1,102],28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,88:103,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},o($VF,[2,68]),o($VF,[2,69]),{25:[1,105]},{9:106,47:107,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8},{12:67,15:65,25:$Vm,26:108,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:109,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{59:[1,110]},{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,47:22,48:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,57:$V9,59:$Va,60:$Vb,61:$Vc,84:$Vd,89:$Ve,90:$Vf,91:$Vg},{13:[1,112],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vh,[2,93]),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,27]),o($VF,[2,28]),o($VF,[2,29]),o($VF,[2,30]),o($VF,[2,31]),o($VF,[2,32]),o($VF,[2,33]),o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,50],{25:$Vi,55:[1,128],72:$Vj,73:$Vk}),{12:67,15:65,25:$Vm,26:129,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:130,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:131,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{25:[1,132]},{25:[1,133]},{25:[1,134]},{25:[1,135]},{25:[1,136]},{25:[1,137]},{25:[1,138]},o($Vh,[2,94]),o($Vh,[2,95]),o($Vh,[2,20]),{27:[1,139],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($VV,[2,43]),{12:67,15:65,25:$Vm,26:140,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{27:[1,142],47:143,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,83:141},{48:[1,144]},{13:[1,145],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{56:[1,146],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($VF,[2,88]),{27:[1,147],85:$VW},o($VX,[2,91],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU}),{27:[1,150],47:143,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,83:149},{12:67,15:65,25:$Vm,26:151,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{48:[1,152]},{27:[1,153],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,154],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{25:[1,155]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,47:22,48:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,57:$V9,59:$Va,60:$Vb,61:$Vc,84:$Vd,87:[1,156],89:$Ve,90:$Vf,91:$Vg},o($Vh,[2,92]),{12:67,15:65,25:$Vm,26:157,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:158,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:159,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:160,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:161,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:162,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:163,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:164,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:165,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:166,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:167,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:168,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:169,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:170,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:171,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:172,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},o($VY,[2,66],{64:$VG}),{27:[1,173],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($VZ,[2,78],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS}),{12:67,15:65,25:$Vm,26:174,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:175,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:176,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:177,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:178,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:179,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{12:67,15:65,25:$Vm,26:180,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{13:[1,181]},{13:[1,182],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,183],85:$V_},{58:185,86:$Vl},{48:[1,186]},{49:[1,187]},o($Vh,[2,79]),{49:[1,188]},o($VF,[2,89]),{12:67,15:65,25:$Vm,26:189,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{27:[1,190],85:$V_},{58:191,86:$Vl},{13:[1,192],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{13:$VD,49:$VE},{58:193,86:$Vl},{58:194,86:$Vl},{12:67,15:65,25:$Vm,26:195,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},o([2,5,23,24,48,50,51,52,53,54,57,59,60,61,63,84,87,89,90,91],[2,87]),o($V$,[2,60],{64:$VG,68:$VJ,69:$VK,71:$VM}),o($V$,[2,61],{64:$VG,68:$VJ,69:$VK,71:$VM}),o($VY,[2,62],{64:$VG}),o($VY,[2,63],{64:$VG}),o([13,27,56,65,70,80,81,85,87],[2,64],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS}),o($VY,[2,65],{64:$VG}),o($V01,[2,70],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM,76:$VP,77:$VQ,78:$VR,79:$VS}),o($V01,[2,71],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM,76:$VP,77:$VQ,78:$VR,79:$VS}),o($V11,[2,72],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM}),o($V11,[2,73],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM}),o($V11,[2,74],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM}),o($V11,[2,75],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,71:$VM}),o([13,27,56,65,80,85,87],[2,76],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,81:$VU}),o($VZ,[2,77],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS}),{64:$VG,65:[1,196],66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{56:[1,197],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($VF,[2,67]),{27:[1,198],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,199],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,200],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,201],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,202],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,203],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,204],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vh,[2,21]),o($VV,[2,44]),{58:205,86:$Vl},{47:206,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8},o($Vh,[2,83]),o($V21,[2,86]),{86:[1,208],99:[1,207]},{12:67,15:65,25:$Vm,26:209,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},o($VX,[2,90],{64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU}),{58:210,86:$Vl},o($Vh,[2,84]),{15:211,48:[1,212]},o($Vh,[2,58],{62:213,63:[1,214]}),o($Vh,[2,53]),{27:[1,215],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{12:67,15:65,25:$Vm,26:216,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},o($VF,[2,51]),o($VF,[2,96]),o($VF,[2,97]),o($VF,[2,98]),o($VF,[2,99]),o($VF,[2,100]),o($VF,[2,101]),o($VF,[2,102]),o($Vh,[2,81]),{48:[1,217]},{47:218,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8},{12:67,15:65,25:$Vm,26:104,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,88:219,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{13:[1,220],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vh,[2,82]),{27:[1,221]},{72:$Vj,73:$Vk},o($Vh,[2,55]),{18:223,58:222,61:$Vc,86:$Vl},{13:[1,224]},o($VF,[2,59]),o($V21,[2,85]),{55:[1,225]},{85:$VW,87:[1,226]},o($Vh,[2,80]),{58:227,86:$Vl},o($Vh,[2,56]),o($Vh,[2,57]),o($Vh,[2,54]),{12:67,15:65,25:$Vm,26:228,28:60,29:61,30:62,31:63,32:64,33:66,34:68,35:69,36:70,37:71,38:72,39:73,40:74,41:75,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vs,67:$Vt,82:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB},{13:[1,229]},o($Vh,[2,52]),{56:[1,230],64:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vh,[2,104]),{13:[1,231]},o($Vh,[2,103])],
defaultActions: {37:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const{Print} = require('../instruccion/Print');
    const{Primitivo} = require('../expression/Primitivo');
    const{Type} = require('../abstract/Tipo_primitivo');
    const{Declaration} = require('../instruccion/Declaration');
    const{Access} = require('../expression/Access');
    const{Operacion_aritmetica} = require('../expression/operacion_aritmetica');
    const{Asignacion} = require('../instruccion/asignacion.ts');
    const{Statement} = require('../instruccion/statement.ts');
    const{Funcion} = require('../instruccion/funcion.ts');
    const{Parametro} = require('../expression/parametro.ts');
    const{CallFuncion} = require('../expression/callFuncion.ts');
    const{Operacion_relacional} = require('../expression/operacion_relacional.ts');
    const{Operacion_unaria} = require('../expression/operacion_unaria.ts');
    const{For} = require('../instruccion/for.ts');
    const{If} = require('../instruccion/if.ts');
    const{Operacion_logica} = require('../expression/operacion_logica.ts');
    const{While} = require('../instruccion/while.ts');
    const{ReturnExpression} = require('../expression/return.ts');
    const{Dowhile} = require('../instruccion/dowhile.ts');
    const{TOLower} = require('../expression/tolower.ts');
    const{TOUpper} = require('../expression/toupper.ts');
    const{Truncate} = require('../expression/truncate.ts');
    const{Round} = require('../expression/round.ts');
    const{TypeOf} = require('../expression/typeof.ts');
    const{ToString} = require('../expression/tostring.ts');
    const{Err} = require('../salidas/out.ts');
    const{Casteo} = require('../expression/casteo.ts');
    const{Ternario} = require('../expression/ternario.ts');
    const{Vector} = require('../instruccion/vector.ts');
    const{AccessVector} = require('../expression/accessVector.ts');
    const{AsignacionVector} = require('../instruccion/asignacionVector.ts');
    const{Lenght} = require('../expression/lenght.ts');
    

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:return "MAIN";
break;
case 5:return "VOID";
break;
case 6:return "PRINT";
break;
case 7:return "TOLOWER";
break;
case 8:return "TOUPPER";
break;
case 9:return "LENGTH";
break;
case 10:return "TRUNCATE";
break;
case 11:return "ROUND";
break;
case 12:return 96;
break;
case 13:return "TOSTRING";
break;
case 14:return "TOCHARARRAY";
break;
case 15:return "IF";
break;
case 16:return "ELSE";
break;
case 17:return "SWITCH";
break;
case 18:return "CASE";
break;
case 19:return "DEFAULT";
break;
case 20:return "WHILE";
break;
case 21:return "FOR";
break;
case 22:return "DO";
break;
case 23:return "BREAK"
break;
case 24:return "CONTINUE";
break;
case 25:return "RETURN";
break;
case 26:return "NEW";
break;
case 27:return "ADD";     
break;
case 28:return "KLENNE";
break;
case 29:return "DOSPUNTOS";
break;
case 30:return "PUNTOCOMA";
break;
case 31:return "PARIZQ";
break;
case 32:return "PARDER";
break;
case 33:return "LLAVEIZQ";
break;
case 34:return "LLAVEDER";
break;
case 35:return "CORIZQ";
break;
case 36:return "CORDER";
break;
case 37:return "COMA"
break;
case 38:return "PUNTO";
break;
case 39:return "RES_INT";
break;
case 40:return "RES_DOUBLE";
break;
case 41:return "RES_BOOL";
break;
case 42:return "RES_CHAR";
break;
case 43:return "RES_STRING";
break;
case 44:return "INCREMENTO";
break;
case 45:return "DECREMENTO";
break;
case 46:return "MAS";
break;
case 47:return "MENOS";
break;
case 48:return "POR";
break;
case 49:return "DIVISION";
break;
case 50:return "POTENCIA";
break;
case 51:return "MODULO";
break;
case 52:return "IGUALAR";
break;
case 53:return "IGUAL";
break;
case 54:return "NOIGUAL";
break;
case 55:return "MENORIGUAL"
break;
case 56:return "MENOR";
break;
case 57:return "MAYORIGUAL";
break;
case 58:return "MAYOR";
break;
case 59:return "OR";
break;
case 60:return "AND";
break;
case 61:return "NOT";
break;
case 62:return 43;
break;
case 63:return 42;
break;
case 64:return 44;
break;
case 65:return 45;
break;
case 66:return 46;
break;
case 67:return 48;
break;
case 68:return 5;
break;
case 69: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  
                            const nuevooble =  { tipo: "Lexico", descripcion: `Caracter: ${yy_.yytext} no esperado`, linea:  yy_.yylloc.first_line , columna: yy_.yylloc.first_column}
                            Err.push(nuevooble);
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:(\|\|))/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:true|false\b)/i,/^(?:('[^']'))/i,/^(?:("([^\"]|\\")*"))/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}