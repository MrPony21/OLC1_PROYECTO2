/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,18],$V9=[1,20],$Va=[1,19],$Vb=[1,17],$Vc=[2,5,17,32,34,35,36,37,38,39,41,42,63,66],$Vd=[1,35],$Ve=[1,36],$Vf=[1,55],$Vg=[1,48],$Vh=[1,49],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[11,20,45,46,47,48,49,50,53,54,55,56,57,58,59,60,64],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[2,5,17,18,26,27,28,29,30,32,34,35,36,37,38,39,41,42,46,61,63,66],$VG=[20,64],$VH=[11,20,45,46,49,55,56,57,58,59,60,64],$VI=[11,20,45,46,47,48,49,50,55,56,57,58,59,60,64],$VJ=[1,118],$VK=[1,120],$VL=[11,20,64],$VM=[11,20,49,55,56,57,58,59,60,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Print":7,"Declaration":8,"Asignacion":9,"Callfuncion":10,"PUNTOCOMA":11,"DeclararFuncion":12,"Operaciones_unarias":13,"For":14,"cif":15,"While":16,"PRINT":17,"PARIZQ":18,"Expression":19,"PARDER":20,"Primitivo":21,"Accvar":22,"Aritmetica":23,"Relacionales":24,"Logicos":25,"INT":26,"DOUBLE":27,"BOOL":28,"CHAR":29,"CADENA":30,"Tipo":31,"IDENTIFICADOR":32,"IGUAL":33,"RES_INT":34,"RES_DOUBLE":35,"RES_BOOL":36,"RES_CHAR":37,"RES_STRING":38,"FOR":39,"Statement":40,"WHILE":41,"IF":42,"celse":43,"ELSE":44,"MAS":45,"MENOS":46,"POR":47,"DIVISION":48,"POTENCIA":49,"MODULO":50,"INCREMENTO":51,"DECREMENTO":52,"IGUALAR":53,"NOIGUAL":54,"MENOR":55,"MENORIGUAL":56,"MAYOR":57,"MAYORIGUAL":58,"OR":59,"AND":60,"NOT":61,"Parametros":62,"VOID":63,"COMA":64,"LLAVEIZQ":65,"LLAVEDER":66,"Argumentos":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"PUNTOCOMA",17:"PRINT",18:"PARIZQ",20:"PARDER",26:"INT",27:"DOUBLE",28:"BOOL",29:"CHAR",30:"CADENA",32:"IDENTIFICADOR",33:"IGUAL",34:"RES_INT",35:"RES_DOUBLE",36:"RES_BOOL",37:"RES_CHAR",38:"RES_STRING",39:"FOR",41:"WHILE",42:"IF",44:"ELSE",45:"MAS",46:"MENOS",47:"POR",48:"DIVISION",49:"POTENCIA",50:"MODULO",51:"INCREMENTO",52:"DECREMENTO",53:"IGUALAR",54:"NOIGUAL",55:"MENOR",56:"MENORIGUAL",57:"MAYOR",58:"MAYORIGUAL",59:"OR",60:"AND",61:"NOT",63:"VOID",64:"COMA",65:"LLAVEIZQ",66:"LLAVEDER"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[7,5],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[21,1],[21,1],[21,1],[21,1],[21,1],[8,3],[8,5],[31,1],[31,1],[31,1],[31,1],[31,1],[22,1],[14,8],[16,5],[15,6],[43,2],[43,2],[43,0],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[13,2],[13,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[25,3],[25,3],[25,2],[9,4],[12,6],[12,6],[12,5],[12,5],[62,4],[62,2],[40,3],[10,3],[10,4],[67,3],[67,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 3: case 70:
 this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 8: case 10: case 11: case 12: case 20: case 37: case 38:
 this.$ = $$[$0]; 
break;
case 7: case 9:
 this.$ = $$[$0-1]; 
break;
case 13:
 console.error('Este es un error sintactico: ' +yytext + ', en la linea: '+ this._$.first_line+ ', en la columna: '+ this._$.first_column);
break;
case 14:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2]);
break;
case 15: case 16: case 17: case 18: case 19:
 this.$ = $$[$0];
break;
case 21:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.INT);
break;
case 22:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.DOUBLE); console.log("se ingreso un double");
break;
case 23:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 24:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.CHAR);
break;
case 25:
 this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], Type.STRING);
break;
case 26:
 this.$ = new Declaration($$[$0-1], $$[$0-2], null, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 27:
 this.$ = new Declaration($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 28:
 this.$ = Type.INT 
break;
case 29:
 this.$ = Type.DOUBLE
break;
case 30:
 this.$ = Type.BOOLEAN
break;
case 31:
 this.$ = Type.CHAR
break;
case 32:
 this.$ = Type.STRING
break;
case 33:
 this.$ = new Access($$[$0], _$[$0].first_line,_$[$0].first_column);
break;
case 34:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0] ,_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 35:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 36:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 39:
 this.$ = null; 
break;
case 40:
 this.$ = new Operacion_aritmetica($$[$0-2],"+",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 41:
 this.$ = new Operacion_aritmetica($$[$0-2],"-",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 42:
 this.$ = new Operacion_aritmetica($$[$0-2],"*",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 43:
 this.$ = new Operacion_aritmetica($$[$0-2],"/",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 44:
 this.$ = new Operacion_aritmetica($$[$0-2],"^",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 45:
 this.$ = new Operacion_aritmetica($$[$0-2],"%",$$[$0], _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 46:
 this.$ = new Operacion_aritmetica($$[$0],'umenos', $$[$0] ,_$[$0-1].first_line,_$[$0-1].first_column); console.log("Se registro unmenos") 
break;
case 47:
 this.$ = $$[$0-1]
break;
case 48:
 this.$ = new Operacion_unaria($$[$0-1],"++", _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 49:
 this.$ = new Operacion_unaria($$[$0-1],"--", _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 50:
 this.$ = new Operacion_relacional($$[$0-2],"==",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 51:
 this.$ = new Operacion_relacional($$[$0-2],"!=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 52:
 this.$ = new Operacion_relacional($$[$0-2],"<",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 53:
 this.$ = new Operacion_relacional($$[$0-2],"<=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 54:
 this.$ = new Operacion_relacional($$[$0-2],">",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 55:
 this.$ = new Operacion_relacional($$[$0-2],">=",$$[$0],  _$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 56:
 this.$ = new Operacion_logica($$[$0-2], "OR", $$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 57:
 this.$ = new Operacion_logica($$[$0-2], "AND", $$[$0] , _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 58:
 this.$ = new Operacion_logica($$[$0], "NOT", $$[$0] , _$[$0-1].first_line,_$[$0-1].first_column)
break;
case 59:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 60:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0], _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 61:
 this.$ = new Funcion(Type.NULL, $$[$0-4], $$[$0-2], $$[$0] , _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 62:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 63:
 this.$ = new Funcion(Type.NULL, $$[$0-3], [], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 64:

                                            $$[$0-3].push( new Parametro($$[$0-1], $$[$0], _$[$0-3].first_line,_$[$0-3].first_column));
                                            this.$ = $$[$0-3];
                                        
break;
case 65:
 
                                let para = new Parametro($$[$0-1], $$[$0], _$[$0-1].first_line,_$[$0-1].first_column)
                                let params = [];
                                params.push(para);
                                this.$ = params;
                            
break;
case 66:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 67:
 this.$ = new CallFuncion($$[$0-2], [] , _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 68:
 this.$ = new CallFuncion($$[$0-3], $$[$0-1] , _$[$0-3].first_line,_$[$0-3].first_column);
break;
case 69:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:$V1,31:15,32:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:$Va,63:$Vb},{1:[3]},{2:$V0,5:[1,26],6:27,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:$V1,31:15,32:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:$Va,63:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{11:[1,28]},o($Vc,[2,8]),{11:[1,29]},o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{11:[1,30]},{18:[1,31]},{32:[1,32]},{18:[1,34],33:[1,33],51:$Vd,52:$Ve},{32:[1,37]},{18:[1,38]},{18:[1,39]},{18:[1,40]},{32:[2,28]},{32:[2,29]},{32:[2,30]},{32:[2,31]},{32:[2,32]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,7]),o($Vc,[2,9]),o($Vc,[2,13]),{13:46,18:$Vf,19:41,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{11:$Vo,18:[1,59],33:$Vp},{13:46,18:$Vf,19:60,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:63,20:[1,61],21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn,67:62},o($Vq,[2,48]),o($Vq,[2,49]),{18:[1,64]},{8:65,31:66,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},{13:46,18:$Vf,19:67,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:68,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{20:[1,69],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,25]),o($Vq,[2,33],{51:$Vd,52:$Ve}),{13:46,18:$Vf,19:84,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:85,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:86,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},o($VF,[2,26]),{13:46,18:$Vf,19:87,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{20:[1,89],31:90,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,62:88},{11:[1,91],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},{11:[2,67]},{20:[1,92],64:[1,93]},o($VG,[2,70],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE}),{20:[1,95],31:90,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,62:94},{13:46,18:$Vf,19:96,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{32:[1,97]},{20:[1,98],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},{20:[1,99],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},{11:[1,100]},{13:46,18:$Vf,19:101,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:102,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:103,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:104,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:105,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:106,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:107,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:108,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:109,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:110,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:111,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:112,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:113,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{13:46,18:$Vf,19:114,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},o($VH,[2,46],{47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),{20:[1,115],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},o($VI,[2,58],{53:$Vx,54:$Vy}),{11:[1,116],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},{20:[1,117],64:$VJ},{40:119,65:$VK},{32:[1,121]},o($Vc,[2,59]),{11:[2,68]},{13:46,18:$Vf,19:122,21:42,22:43,23:44,24:45,25:47,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,32:$Vl,46:$Vm,61:$Vn},{20:[1,123],64:$VJ},{40:124,65:$VK},{11:[1,125],45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE},{11:$Vo,33:$Vp},{40:126,65:$VK},{40:127,65:$VK},o($Vc,[2,14]),o($VH,[2,40],{47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),o($VH,[2,41],{47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),o($VI,[2,42],{53:$Vx,54:$Vy}),o($VI,[2,43],{53:$Vx,54:$Vy}),o([11,20,49,64],[2,44],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE}),o($VI,[2,45],{53:$Vx,54:$Vy}),o($VL,[2,50],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE}),o($VL,[2,51],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE}),o($VM,[2,52],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),o($VM,[2,53],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),o($VM,[2,54],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),o($VM,[2,55],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy}),o([11,20,49,59,64],[2,56],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,60:$VE}),o([11,20,49,59,60,64],[2,57],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC}),o($Vq,[2,47]),o($VF,[2,27]),{40:128,65:$VK},{31:129,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},o($Vc,[2,62]),{2:$V0,4:130,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:$V1,31:15,32:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:$Va,63:$Vb},o($VG,[2,65]),o($VG,[2,69],{45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE}),{40:131,65:$VK},o($Vc,[2,63]),{13:132,32:[1,133]},o($Vc,[2,39],{43:134,44:[1,135]}),o($Vc,[2,35]),o($Vc,[2,60]),{32:[1,136]},{2:$V0,6:27,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:$V1,31:15,32:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:$Va,63:$Vb,66:[1,137]},o($Vc,[2,61]),{20:[1,138]},{51:$Vd,52:$Ve},o($Vc,[2,36]),{15:140,40:139,42:$Va,65:$VK},o($VG,[2,64]),o([2,5,17,32,34,35,36,37,38,39,41,42,44,63,66],[2,66]),{40:141,65:$VK},o($Vc,[2,37]),o($Vc,[2,38]),o($Vc,[2,34])],
defaultActions: {21:[2,28],22:[2,29],23:[2,30],24:[2,31],25:[2,32],26:[2,1],61:[2,67],92:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const{Print} = require('../instruccion/Print');
    const{Primitivo} = require('../expression/Primitivo');
    const{Type} = require('../abstract/Tipo_primitivo');
    const{Declaration} = require('../instruccion/Declaration');
    const{Access} = require('../expression/Access');
    const{Operacion_aritmetica} = require('../expression/operacion_aritmetica');
    const{Asignacion} = require('../instruccion/asignacion.ts');
    const{Statement} = require('../instruccion/statement.ts');
    const{Funcion} = require('../instruccion/funcion.ts');
    const{Parametro} = require('../expression/parametro.ts');
    const{CallFuncion} = require('../expression/callFuncion.ts');
    const{Operacion_relacional} = require('../expression/operacion_relacional.ts');
    const{Operacion_unaria} = require('../expression/operacion_unaria.ts');
    const{For} = require('../instruccion/for.ts');
    const{If} = require('../instruccion/if.ts');
    const{Operacion_logica} = require('../expression/operacion_logica.ts');
    const{While} = require('../instruccion/while.ts');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:return "MAIN";
break;
case 5:return "VOID";
break;
case 6:return "PRINT";
break;
case 7:return "TOLOWER";
break;
case 8:return "TOUPPER";
break;
case 9:return "LENGHT";
break;
case 10:return "TRUNCATE";
break;
case 11:return "ROUND";
break;
case 12:return 'TYPEOF';
break;
case 13:return "TOSTRING";
break;
case 14:return "TOCHARARRAY";
break;
case 15:return "IF";
break;
case 16:return "ELSE";
break;
case 17:return "SWITCH";
break;
case 18:return "CASE";
break;
case 19:return "DEFAULT";
break;
case 20:return "WHILE";
break;
case 21:return "FOR";
break;
case 22:return "DO";
break;
case 23:return "BREAK"
break;
case 24:return "CONTINUE";
break;
case 25:return "return";
break;
case 26:return "NEW";
break;
case 27:return "ADD";     
break;
case 28:return "KLENNE";
break;
case 29:return "DOSPUNTOS";
break;
case 30:return "PUNTOCOMA";
break;
case 31:return "PARIZQ";
break;
case 32:return "PARDER";
break;
case 33:return "LLAVEIZQ";
break;
case 34:return "LLAVEDER";
break;
case 35:return "CORIZQ";
break;
case 36:return "CORDER";
break;
case 37:return "COMA"
break;
case 38:return "PUNTO";
break;
case 39:return "RES_INT";
break;
case 40:return "RES_DOUBLE";
break;
case 41:return "RES_BOOL";
break;
case 42:return "RES_CHAR";
break;
case 43:return "RES_STRING";
break;
case 44:return "INCREMENTO";
break;
case 45:return "DECREMENTO";
break;
case 46:return "MAS";
break;
case 47:return "MENOS";
break;
case 48:return "POR";
break;
case 49:return "DIVISION";
break;
case 50:return "POTENCIA";
break;
case 51:return "MODULO";
break;
case 52:return "IGUALAR";
break;
case 53:return "IGUAL";
break;
case 54:return "NOIGUAL";
break;
case 55:return "MENORIGUAL"
break;
case 56:return "MENOR";
break;
case 57:return "MAYORIGUAL";
break;
case 58:return "MAYOR";
break;
case 59:return "OR";
break;
case 60:return "AND";
break;
case 61:return "NOT";
break;
case 62:return 27;
break;
case 63:return 26;
break;
case 64:return 28;
break;
case 65:return 29;
break;
case 66:return 30;
break;
case 67:return 32;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Lenght\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:(\|\|))/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:true|false\b)/i,/^(?:('[^']'))/i,/^(?:("([^\"]|\\")*"))/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}